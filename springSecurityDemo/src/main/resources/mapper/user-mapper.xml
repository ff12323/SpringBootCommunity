<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 为哪个mapper服务，需要写类的全限制名称 -->
<mapper namespace="com.newcoder.community.securityDemo.dao.UserMapper">

    <!-- 通过字段定义 和 引用的方式让 代码的复用性高，方便维护 -->
    <sql id="selectFields">
        id,  username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>


    <!-- id为对应的方法名称 resultType返回的类型：应该写全限定名，但是type-aliases-package的配置文件里告诉了包名
        #{id},引用调用方法的参数id
    -->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!-- 告诉主键的名称，id字段对应的属性。
    增加的时候，mysql底层会自动生成id，mybatis会从mysql得到这个id，填入这个User，属于回填。 -->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert  into user (<include refid="insertFields"></include>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl} ,#{createTime})
    </insert>
    
    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>
</mapper>